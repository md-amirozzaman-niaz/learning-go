#!/bin/bash
# GitHub CLI commands to create issues for Go Learning Roadmap
# Make sure you have GitHub CLI installed and authenticated
# Run: chmod +x create_issues.sh && ./create_issues.sh

echo "Creating issue 1/8..."
gh issue create --title "ðŸŸ¢ 1. Go Basics (Language Core)" --body "This issue tracks the learning progress for: **Go Basics (Language Core)**\n\n## Learning Checklist\n\n- [ ] Setup & Tooling (`go run`, `go build`, `go mod`)\n- [ ] Project structure & modules\n- [ ] Variables, constants, type inference (`:=`)\n- [ ] Basic types: string, int, float, bool, rune, byte\n- [ ] Type conversions\n- [ ] Control Flow (`if`, `for`, `switch`, break/continue)\n- [ ] Functions (multiple return values, named return values, variadic)\n- [ ] Pointers (value vs reference, passing by reference)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 2/8..."
gh issue create --title "ðŸŸ¡ 2. Data Structures & Collections" --body "This issue tracks the learning progress for: **Data Structures & Collections**\n\n## Learning Checklist\n\n- [ ] Arrays & Slices (length, capacity, backing array, append, copy, slicing)\n- [ ] Maps (declaration, CRUD, check existence with `value, ok := map[key]`)\n- [ ] Structs (initialization, field tags, embedding)\n- [ ] Methods (value vs pointer receivers)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 3/8..."
gh issue create --title "ðŸŸ  3. Deeper Language Features" --body "This issue tracks the learning progress for: **Deeper Language Features**\n\n## Learning Checklist\n\n- [ ] Interfaces (implicit implementation, empty interface, type assertions)\n- [ ] Error Handling (`error` type, custom errors, `errors.Is`, `errors.As`, `fmt.Errorf` with `%w`)\n- [ ] Packages (`init()`, exported vs unexported)\n- [ ] Generics (type parameters, constraints) â€” Go 1.18+\n- [ ] Reflection (`reflect` package basics)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 4/8..."
gh issue create --title "ðŸ”µ 4. Concurrency & Parallelism" --body "This issue tracks the learning progress for: **Concurrency & Parallelism**\n\n## Learning Checklist\n\n- [ ] Goroutines (lightweight threads, function calls as goroutines)\n- [ ] Channels (unbuffered vs buffered, `select` statement)\n- [ ] Concurrency Patterns (worker pools, fan-in / fan-out, context cancellation)\n- [ ] `sync` Package (WaitGroup, Mutex, RWMutex, Once)\n- [ ] Atomic operations\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 5/8..."
gh issue create --title "ðŸŸ£ 5. Standard Library & Utilities" --body "This issue tracks the learning progress for: **Standard Library & Utilities**\n\n## Learning Checklist\n\n- [ ] I/O & Files (`io`, `os`, `bufio`)\n- [ ] Strings & Formatting (`strings`, `strconv`, `fmt`)\n- [ ] Time (`time` package, timers, tickers)\n- [ ] Networking (`net/http` basics, JSON handling with `encoding/json`)\n- [ ] Testing (`testing` package, table-driven tests, benchmarks & examples)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 6/8..."
gh issue create --title "ðŸ”´ 6. Advanced Topics" --body "This issue tracks the learning progress for: **Advanced Topics**\n\n## Learning Checklist\n\n- [ ] Context (`context.Background`, `WithCancel`, `WithTimeout`)\n- [ ] Error Groups (`errgroup` package)\n- [ ] Custom Packages & Modules (semantic versioning, private modules)\n- [ ] Performance (profiling with `pprof`, escape analysis)\n- [ ] Memory Management (garbage collection basics)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 7/8..."
gh issue create --title "ðŸŸ¤ 7. Go in Practice" --body "This issue tracks the learning progress for: **Go in Practice**\n\n## Learning Checklist\n\n- [ ] Web Development (`net/http`, frameworks: Fiber, Gin, Echo)\n- [ ] Database (`database/sql`, ORMs: GORM, Ent)\n- [ ] Microservices (gRPC, REST APIs)\n- [ ] Deployment (building executables, cross-compilation, Dockerizing Go apps)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

echo "Creating issue 8/8..."
gh issue create --title "âš« 8. Ecosystem & Best Practices" --body "This issue tracks the learning progress for: **Ecosystem & Best Practices**\n\n## Learning Checklist\n\n- [ ] Go Modules & Dependency Management\n- [ ] Project structure (standard layout)\n- [ ] Logging (`log`, `zap`, `zerolog`)\n- [ ] Configuration management (`viper`)\n- [ ] Linters & formatters (`gofmt`, `golangci-lint`)\n- [ ] CI/CD pipelines\n- [ ] Security practices (validations, safe concurrency)\n\n## Notes\n\nPlease use this issue to:\n- Track your progress by checking off completed items\n- Add notes and resources in the comments\n- Ask questions related to this learning section\n\n## Resources\n\nFeel free to add helpful links, tutorials, and resources in the comments below.\n\n---\n*This issue was generated from the [Go Learning Roadmap](README.md)*\n" --label "learning,roadmap"
sleep 1  # Rate limiting

